let mongoose,Schema,bcrypt;_b43‍.x([["default",()=>_b43‍.o]]);_b43‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}],["Schema",["Schema"],function(v){Schema=v}]]);_b43‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]); 


const UserSchema = new Schema({
    username: String, 
    hashedPassword: String
})

UserSchema.methods.setPassword = async function(password) {
    const hash = await bcrypt.hash(password, 10);
    this.hashedPassword = hash
}

UserSchema.methods.checkPassword = async function(password) {
    const result = await bcrypt.compare(password, this.hashedPassword)
    return result; //true / false
}

UserSchema.satics.findByUsername = function(username) {
    return this.findOne({ username })
}

UserSchema.methods.serialize = function() {
    const data = this.toJSON(); 
    delete data.hashedPassword; 
    return data;
}

const User = mongoose.model('User', UserSchema)
_b43‍.d(User); 