let Koa,Router,bodyParser,mongoose,api,createFakeData;_23b‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_23b‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_23b‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_23b‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_23b‍.w("./api",[["default",["api"],function(v){api=v}]]);_23b‍.w("./createFakeData",[["default",["createFakeData"],function(v){createFakeData=v}]]);require('dotenv').config(); 
 
 
 
 




// 비구조화 할당을 통해 process.env 내부 값에 대한 레퍼런스 만들기 
const { PORT, MONGO_URI } = process.env; 

mongoose
  .connect(MONGO_URI, { useNewUrlParser: true })
  .then(() => {
    console.log('Connected to MongoDB');
    createFakeData();
  })
  .catch(e => {
    _23b‍.g.console.error(e);
  });

const app = new Koa();
const router = new Router();

// 라우터 설정
router.use('/api', api.routes()); // api 라우트 적용

// 라우터 적용 전에 bodyParser 적용
app.use(bodyParser());

// app 인스턴스에 라우터 적용
app.use(router.routes()).use(router.allowedMethods());

// PORT 가 지정되어있지 않다면 4000 을 사용
const port = PORT || 4000;
app.listen(port, () => {
  _23b‍.g.console.log('Listening to port %d', port);
});